1.  Which of the following algorithms would be best suited for a tail recursive implementation:
    - depth first search of a tree
    - randomized quicksort
    - binary search of a sorted array
    - file system traversal

2. Missed

3.  Which programming language feature relies on manipulating the source code's abstract syntax tree?
    - C preprocessor
    - templates
    - string interpolation
    - macros

4.   Which is NOT a distinguishing feature of a Progressive Web Application on a mobile platform?
    - The app supports push notifications from a server
    - The app can access device hardware.
    - The app works offline.
    - The app is distributed and installed on the mobile device.

5. What does the following code output?
    def func(a, b)
        a += 1
        b.push(1)
    end
    a, b = 0, []
    func(a, b)
    print a, b

    -1[1]
    -0[1]
    -1[]
    -0[]

  6.  Which graph algorithm do build tools like "make" use to efficiently determine the order in which to build dependencies?
    - Iterative deepening depth first search is the fastest way to build a linear ordering of a graph, running in O(n) time.
    - make finds a minimum spanning tree over dependencies, which minimizes the number of compilations required to build the target.
    - A topological sort over dependencies will yield a valid build order.
    - A max-flow algorithm like Ford-Fulkerson will not only determine the build order, but can identify subsets of the graph
      that can run on multiple threads.

7. Accidentally deleted that one

8. Which of the following is a recommended function for securely storing hashed passwords on an authenticating server?
   - unsalted
   - scrypt
   - SHA-1
   - MD5

9.  Which HTTP method would efficiently check whether a resource URI exists?
    - CONNECT
    - GET
    - TRACE
    - hashed

10. What is the output of the following multiple dispatch method call?
    func(x::Int, y::Int) = x / y
    func(x::Int, y::Number) = func(x, trunc(Int, y))
    func(x::Number, y::Number) = func(trunc(Int, x), y)
    print(func(1.5, 2.0))
    - 0.0
    - raises an ambiguous MethodError
    - 0.75
    - 0.5

11. Which of the following is an advantage of representing a binary-search tree with a continguous array (rather than
    nodes linked via pointers)?
    - It's more secure (pointer operations create surface area for exploits)
    - It makes inserts faster (because you can jump to the insert location in constant time)
    - It allows the tree to be built in linear time (via the heap-down operation)
    - It's maximally compact, and cache efficiently

12. Which of the following is NOT a benefit of using a static analysis code linter?
    - property-based testing
    - unnecessary dependencies(requires, imports, etc.)
    - misnamed variables
    - consistent style enforcing

13. Consider a function which processes an input array of items. It has an automated test suite which measures code
    coverage. However, the function fails when passed an empty array. Which kind of coverage criteria would likely have
    caught this bug?
    - branch coverage
    - function coverage
    - cyclomatic complexity
    - line coverage

14. Which of the following is NOT a typical technique used to implement pagination in an API?
    - specifying a keyset to compare against
    - specifying a cursor to start after
    - specifying larger limits on the number returned
    - specifying an offset

15. What does the following code output?
    var dict = [character: Int]()
    for key in "AAABBC" {
        dict[key, default: 0] += 1
    }
    print (dict.keys.min {dict[$0]! < dict[$1]! } ?? "")

16. Which of the following is NOT a space-efficient storage format for a sparse matrix?
    - dictionary of keys
    - compressed sparse row
    - compressed sparse column
    - 2-dimensional array

17. Which security exploit involves poisoning a cache with corrupt data?
    - DNS spoofing
    - Typosquatting
    - Distributed denial of service
    - Phishing

18. Which of the following concurrency models are ordered in increasing resource usage, e.g., memory?
    - coroutines, processes, threads
    - forks, fibers, native threads
    - forks, threads, coroutines
    - green threads, native threads, processes

19. Which SQL command would be used to determine whether a query uses an index?
    - SHOW
    - ANALYZE
    - REINDEX
    - EXPLAIN

20. Which of the following is NOT a typical reason to use an enumerated type?
    - ratio of constants
    - higher readability
    - compact storage
    - constraining valid values

21. Which of the following is NOT a common use case for feature toggles (a.k.a. feature flags)?
    - Integrating a new feature in a continuous delivery environment
    - Maintaining a new feature branch in source version control
    - Providing feedback on new features before they are completed
    - Testing new features on a small subset of users

22. Which of the following compression techniques is lossy?
    - downsampling
    - Lempel-Ziv
    - Huffman coding
    - run-length encoding

23.  Imagine you're building a massively multi-player Pac Man game. You want hundreds of players to be able to play Pac
     Man against each other at the same time. You're going to pay prize money to the best players, so it's important that
     you limit their ability to cheat. How might you best build this?
     - A server needs to run a canonical copy of the game, with all players. Each client can also run a copy of their
       region of the game, and use this to interpolate states between server updates. Clients would send their control
       inputs to the server (perhaps with a timestamp, although that raises cheating issues), and receive updates for
       all players near them.
    -  Socket.IO is the way to go. Each client can open a web socket connection to the server, and transmit an event
       whenever their player moves. These events will be emitted to every other player in the game. That way every client
       will know where all the other players are, and can detect when they should die and remove themselves from the board.
    -  None of these designs make sense
    -  A peer-to-peer architecture makes the most sense (the latency of a client-server version would be a problem). Each
       player could have a list of peers near them in the game, and send those peers their location every frame. You could
       have a voting system (like a blockchain) where clients vote to resolve state conflicts and agree on the final version.

24. Which of the following is NOT a true statement regarding public-key cryptography?
    - It's used to verify X.509 certificates
    - It's used to exchange a symmetric key in TLS/SSL
    - It's used to exchange a symmetric key in SSH
    - It requires a key exchange over a secure channel

25. Which programming language is known for statistical analysis, but not as a general purpose language?
    - Scala
    - R
    - Python
    - Julia

26. Which is NOT a good use case for a column-oriented database?
    - online transactional processing (OLTP)
    - data compression
    - time series analysis
    - online analytical processing (OLAP)

27. The following code implements a random sample of items in a single pass. Fill in the missing line of code.
    def sample(items, n):
        result = []
        for i, item in enumerate(items):
            if i < n:
                result.append(item)
            else:
                j = randint(0, i) #random integer, inclusive
                if j < n:
                    #Fill in the missing line However
        return result

        - del result[j]
        - result[j] = item
        - result[i] = item
        - result.append(item)

28. Which of the following could a doubly linked list efficiently implement?
    - a priority queue
    - a search tree
    - a stack and a queue
    - an associative array

29. Which HTTP request header is used to identify the URI of the resource from which a request URI was obtained?
    - Location
    - From
    - Referer
    - Host

30. Which of the following practices is NOT associated with continuous integration?
    - scripted deployment to production
    - permanent branches
    - automated testing of all builds
    - automated builds of all commits

31. What would the following code print out?
    #include <stdio.h>
    #include <unistd.h>

    int count = 0;

    int main(void) {
            fork();
            printf("%d", count++);
            return 0;
    }

    - 00
    - 0
    - 1
    - 01

32. Which media type is commonly used in a POST request and also used to format a GET query string?
    - text/plain
    - application/x-www-form-urlencoded
    - application/json
    - text/html

33. Which of the following is NOT a common control flow statement used in loops?
    - return
    - continue
    - finally
    - break

34. Which of the following code snippets would sort complex numbers in a guaranteed consistent
    (but perhaps arbitrary) order?
    - sort_by
    - sort_by { |c| c.real + c.imag}
    - sort_by { |c| [c.real, c.imag] }
    - sort_by { |c| c.real }

35. Which of the following numbers would end up being the largest as n increases indefinitely? (googol is an extremely large number:
    1 googol = 1.0 * 10^100)
    - n!
    - e^n
    - n^googol
    - google * n * log n

36. In reviewing a diff, which property would MOST indicate that a test-driven development process had been followed?
    - All tests pass.
    - The code branch coverage did not decrease.
    - The new tests fail when run on the existing implementation.
    - The code statement coverage did not decrease.

37. Which of the following containers would best suited for storing a mutable data structure as an entry?
    - an unsorted array
    - a sorted array
    - a hash set
    - a search tree

38. Which of the following obserevations would indicate that a group of tasks are being executed concurrently
    but not in parallel?
    - A global lock is used to execute the tasks sequentially
    - Multiple threads are making network requests
    - Only one processor core is in use
    - Multiple processes are writing out to disk

39. How do long-polling and WebSocket compare?
    - Long-polling only allows transmission of short JSON or SML objects (it arose as an extension of AJAX).
      WebSocket extends it to allow longer messages and different content types.
    - Both allow two-way communication between clients and servers. Long-polling is an ugly hack on top of HTTP.
      WebSocvket provides a specific protocol to achieve this behavior.
    - WebSocket is more secure. The protocol is more obscure, and packet sniffers are less likely to intercept and record your data.
    - Long-polling is simpler and more straightforward. However, the caching behavior of many networks (corporate firewalls in
      particular) necessitates WebSocket.

40. Assuming a tree data structure with child nodes, what does the following code do?
    def func(tree):
        nodes = [tree]
        for node in nodes:
            yield node
            nodes += node.children

    - a binary search of the tree
    - a breadth-first traversal of the tree
    - a shallow copy of the tree
    - a depth-first traversal of the tree


